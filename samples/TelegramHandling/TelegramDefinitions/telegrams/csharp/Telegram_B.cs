//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TelegramDefinitions.Telegrams {
    
    
    /// <summary>
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlRoot("Telegram")]
    [System.Serializable()]
    public partial class Telegram_B {
        
        private static string _headerXsbtDefinition = "<?xml version='1.0' encoding='utf-16'?><Telegram name='HeaderType' ID='' bytes='6' IsHeaderType='True' ContainsHeaderType='True'><element name='MessageLength' type='Short' length='2' offset='0' HeaderHint='Length' comment='header plus data' /><element name='MessageId' type='Short' length='2' offset='2' HeaderHint='ID' comment='Message Id' /><element name='MessageCount' type='Short' length='2' offset='4' HeaderHint='MessageCounter' comment='Message counter &#xA;[0..65535] - wrap around' /></Telegram>";
        
        private static string _telegramXsbtDefinition = "<?xml version='1.0' encoding='utf-16'?><Telegram name='Telegram_B' ID='44' bytes='754' ContainsHeaderType='True'><element name='HEAD' type='HeaderType' length='6' offset='0' count='1' comment='Header'><element name='MessageLength' type='Short' length='2' offset='0' count='1' comment='header plus data' /><element name='MessageId' type='Short' length='2' offset='2' count='1' comment='Message Id' /><element name='MessageCount' type='Short' length='2' offset='4' count='1' comment='Message counter &#xA;[0..65535] - wrap around' /></element><element name='ByteValue' type='unsignedByte' length='1' offset='6' count='2' comment='[#]' /><element name='Int_1Byte' type='unsignedByte' length='1' offset='8' count='2' comment='[#]' /><element name='Int_2Byte' type='Short' length='2' offset='10' count='2' comment='[#]' /><element name='Int_4Byte' type='int' length='4' offset='14' count='2' comment='[#]' /><element name='Int_8Byte' type='long' length='8' offset='22' count='2' comment='[#]' /><element name='Integer_1Byte' type='unsignedByte' length='1' offset='38' count='2' comment='[#]' /><element name='Integer_2Byte' type='Short' length='2' offset='40' count='2' comment='[#]' /><element name='Integer_4Byte' type='int' length='4' offset='44' count='2' comment='[#]' /><element name='Integer_8Byte' type='long' length='8' offset='52' count='2' comment='[#]' /><element name='Dint_1Byte' type='unsignedByte' length='1' offset='68' count='2' comment='[#]' /><element name='Dint_2Byte' type='Short' length='2' offset='70' count='2' comment='[#]' /><element name='Dint_4Byte' type='int' length='4' offset='74' count='2' comment='[#]' /><element name='Dint_8Byte' type='long' length='8' offset='82' count='2' comment='[#]' /><element name='Short_1Byte' type='unsignedByte' length='1' offset='98' count='2' comment='[#]' /><element name='Short_2Byte' type='Short' length='2' offset='100' count='2' comment='[#]' /><element name='Short_4Byte' type='int' length='4' offset='104' count='2' comment='[#]' /><element name='Short_8Byte' type='long' length='8' offset='112' count='2' comment='[#]' /><element name='Long_1Byte' type='unsignedByte' length='1' offset='128' count='2' comment='[#]' /><element name='Long_2Byte' type='Short' length='2' offset='130' count='2' comment='[#]' /><element name='Long_4Byte' type='int' length='4' offset='134' count='2' comment='[#]' /><element name='Long_8Byte' type='long' length='8' offset='142' count='2' comment='[#]' /><element name='Uint_1Byte' type='unsignedByte' length='1' offset='158' count='2' comment='[#]' /><element name='Uint_2Byte' type='uShort' length='2' offset='160' count='2' comment='[#]' /><element name='Uint_4Byte' type='uint' length='4' offset='164' count='2' comment='[#]' /><element name='Uint_8Byte' type='ulong' length='8' offset='172' count='2' comment='[#]' /><element name='Ulong_1Byte' type='unsignedByte' length='1' offset='188' count='2' comment='[#]' /><element name='Ulong_2Byte' type='uShort' length='2' offset='190' count='2' comment='[#]' /><element name='Ulong_4Byte' type='uint' length='4' offset='194' count='2' comment='[#]' /><element name='Ulong_8Byte' type='ulong' length='8' offset='202' count='2' comment='[#]' /><element name='UShort_1Byte' type='unsignedByte' length='1' offset='218' count='2' comment='[#]' /><element name='UShort_2Byte' type='uShort' length='2' offset='220' count='2' comment='[#]' /><element name='UShort_4Byte' type='uint' length='4' offset='224' count='2' comment='[#]' /><element name='UShort_8Byte' type='ulong' length='8' offset='232' count='2' comment='[#]' /><element name='Float_4Byte' type='float' length='4' offset='248' count='2' comment='[#]' /><element name='Float_8Byte' type='double' length='8' offset='256' count='2' comment='[#]' /><element name='Real_4Byte' type='float' length='4' offset='272' count='2' comment='[#]' /><element name='Real_8Byte' type='double' length='8' offset='280' count='2' comment='[#]' /><element name='Number_4Byte' type='float' length='4' offset='296' count='2' comment='[#]' /><element name='Number_8Byte' type='double' length='8' offset='304' count='2' comment='[#]' /><element name='Time_stampField' type='time_stamp' length='32' offset='320' count='2' comment='[#]' /><element name='DateTimeField' type='datetime' length='32' offset='384' count='2' comment='[#]' /><element name='DateField' type='date' length='32' offset='448' count='2' comment='[#]' /><element name='StringField' type='string' length='20' offset='512' count='2' comment='[#]' /><element name='PrismoStringField' type='PrimoString' length='20' offset='552' count='2' comment='[#]' /><element name='PcsstringField' type='pcsstring' length='20' offset='592' count='2' comment='[#]' /><element name='OpcstringField' type='opcstring' length='18' offset='632' count='2' comment='[#]' /><element name='WordField' type='Word' length='20' offset='672' count='2' comment='[#]' /><element name='S7charField' type='s7char' length='18' offset='712' count='2' comment='[#]' /><element name='MyChar' type='char' length='1' offset='752' count='2' comment='[#]' /></Telegram>";
        
        private HeaderType _hEAD = new HeaderType();
        
        private System.Byte?[] _byteValue = new System.Byte?[2];
        
        private System.Byte?[] _int_1Byte = new System.Byte?[2];
        
        private System.Int16?[] _int_2Byte = new System.Int16?[2];
        
        private System.Int32?[] _int_4Byte = new System.Int32?[2];
        
        private System.Int64?[] _int_8Byte = new System.Int64?[2];
        
        private System.Byte?[] _integer_1Byte = new System.Byte?[2];
        
        private System.Int16?[] _integer_2Byte = new System.Int16?[2];
        
        private System.Int32?[] _integer_4Byte = new System.Int32?[2];
        
        private System.Int64?[] _integer_8Byte = new System.Int64?[2];
        
        private System.Byte?[] _dint_1Byte = new System.Byte?[2];
        
        private System.Int16?[] _dint_2Byte = new System.Int16?[2];
        
        private System.Int32?[] _dint_4Byte = new System.Int32?[2];
        
        private System.Int64?[] _dint_8Byte = new System.Int64?[2];
        
        private System.Byte?[] _short_1Byte = new System.Byte?[2];
        
        private System.Int16?[] _short_2Byte = new System.Int16?[2];
        
        private System.Int32?[] _short_4Byte = new System.Int32?[2];
        
        private System.Int64?[] _short_8Byte = new System.Int64?[2];
        
        private System.Byte?[] _long_1Byte = new System.Byte?[2];
        
        private System.Int16?[] _long_2Byte = new System.Int16?[2];
        
        private System.Int32?[] _long_4Byte = new System.Int32?[2];
        
        private System.Int64?[] _long_8Byte = new System.Int64?[2];
        
        private System.Byte?[] _uint_1Byte = new System.Byte?[2];
        
        private System.UInt16?[] _uint_2Byte = new System.UInt16?[2];
        
        private System.UInt32?[] _uint_4Byte = new System.UInt32?[2];
        
        private System.UInt64?[] _uint_8Byte = new System.UInt64?[2];
        
        private System.Byte?[] _ulong_1Byte = new System.Byte?[2];
        
        private System.UInt16?[] _ulong_2Byte = new System.UInt16?[2];
        
        private System.UInt32?[] _ulong_4Byte = new System.UInt32?[2];
        
        private System.UInt64?[] _ulong_8Byte = new System.UInt64?[2];
        
        private System.Byte?[] _uShort_1Byte = new System.Byte?[2];
        
        private System.UInt16?[] _uShort_2Byte = new System.UInt16?[2];
        
        private System.UInt32?[] _uShort_4Byte = new System.UInt32?[2];
        
        private System.UInt64?[] _uShort_8Byte = new System.UInt64?[2];
        
        private System.Single?[] _float_4Byte = new System.Single?[2];
        
        private System.Double?[] _float_8Byte = new System.Double?[2];
        
        private System.Single?[] _real_4Byte = new System.Single?[2];
        
        private System.Double?[] _real_8Byte = new System.Double?[2];
        
        private System.Single?[] _number_4Byte = new System.Single?[2];
        
        private System.Double?[] _number_8Byte = new System.Double?[2];
        
        private System.DateTime?[] _time_stampField = new System.DateTime?[2];
        
        private System.DateTime?[] _dateTimeField = new System.DateTime?[2];
        
        private System.DateTime?[] _dateField = new System.DateTime?[2];
        
        private string[] _stringField = new System.String[2];
        
        private const int @__StringFieldMaxLen_GnV9wpZa = 20;
        
        private string[] _prismoStringField = new System.String[2];
        
        private const int @__PrismoStringFieldMaxLen_GnV9wpZa = 20;
        
        private string[] _pcsstringField = new System.String[2];
        
        private const int @__PcsstringFieldMaxLen_GnV9wpZa = 20;
        
        private string[] _opcstringField = new System.String[2];
        
        private const int @__OpcstringFieldMaxLen_GnV9wpZa = 18;
        
        private string[] _wordField = new System.String[2];
        
        private const int @__WordFieldMaxLen_GnV9wpZa = 20;
        
        private string[] _s7charField = new System.String[2];
        
        private const int @__S7charFieldMaxLen_GnV9wpZa = 18;
        
        private string[] _myChar = new System.String[2];
        
        private const int @__MyCharMaxLen_GnV9wpZa = 1;
        
        private static string _name = "Telegram_B";
        
        private static string _iD = "44";
        
        /// <summary>
        /// Defines the fullname of telegram including namespace.
        /// </summary>
        public const string TelegramFullname = "TelegramDefinitions.Telegrams.Telegram_B";
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Telegram_B"/> class.
        /// </summary>
        public Telegram_B() : 
                this(true) {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Telegram_B"/> class.
        /// </summary>
        /// <param name="initWithDefaultValues">Determines whether the telegram should be initialized with default values.</param>
        public Telegram_B(bool initWithDefaultValues) {
            this.HEAD = new HeaderType();
            this.HEAD.MessageId = 44;
            this.HEAD.MessageLength = 754;
            if (initWithDefaultValues) {
                for (int index = 0; (index < 2); index++
                ) {
                    _byteValue[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _int_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _int_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _int_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _int_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _integer_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _integer_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _integer_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _integer_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dint_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dint_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dint_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dint_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _short_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _short_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _short_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _short_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _long_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _long_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _long_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _long_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uint_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uint_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uint_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uint_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _ulong_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _ulong_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _ulong_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _ulong_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uShort_1Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uShort_2Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uShort_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _uShort_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _float_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _float_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _real_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _real_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _number_4Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _number_8Byte[index] = 0;
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _time_stampField[index] = new System.DateTime(1, 1, 1, 0, 0, 0, 0);
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dateTimeField[index] = new System.DateTime(1, 1, 1, 0, 0, 0, 0);
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _dateField[index] = new System.DateTime(1, 1, 1, 0, 0, 0, 0);
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _stringField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _prismoStringField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _pcsstringField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _opcstringField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _wordField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _s7charField[index] = "";
                }
                for (int index = 0; (index < 2); index++
                ) {
                    _myChar[index] = "";
                }
            }
        }
        
        public static string HeaderXsbtDefinition {
            get {
                return Telegram_B._headerXsbtDefinition;
            }
        }
        
        public static string TelegramXsbtDefinition {
            get {
                return Telegram_B._telegramXsbtDefinition;
            }
        }
        
        /// <summary>
        /// Gets or sets the Header.
        /// </summary>
        /// <value>The HEAD.</value>
        [System.Xml.Serialization.XmlElement("HEAD", IsNullable=true)]
        public HeaderType HEAD {
            get {
                return this._hEAD;
            }
            set {
                this._hEAD = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the ByteValue. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The ByteValue.</value>
        [System.Xml.Serialization.XmlElement("ByteValue", IsNullable=true)]
        public System.Byte?[] ByteValue {
            get {
                return this._byteValue;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("ByteValue", "ByteValue cannot handle arrays bigger than 2 elements.");
                }
                this._byteValue = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._byteValue, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Int_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Int_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Int_1Byte", IsNullable=true)]
        public System.Byte?[] Int_1Byte {
            get {
                return this._int_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Int_1Byte", "Int_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._int_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._int_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Int_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Int_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Int_2Byte", IsNullable=true)]
        public System.Int16?[] Int_2Byte {
            get {
                return this._int_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Int_2Byte", "Int_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._int_2Byte = new System.Int16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._int_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Int_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Int_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Int_4Byte", IsNullable=true)]
        public System.Int32?[] Int_4Byte {
            get {
                return this._int_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Int_4Byte", "Int_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._int_4Byte = new System.Int32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._int_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Int_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Int_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Int_8Byte", IsNullable=true)]
        public System.Int64?[] Int_8Byte {
            get {
                return this._int_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Int_8Byte", "Int_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._int_8Byte = new System.Int64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._int_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Integer_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Integer_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Integer_1Byte", IsNullable=true)]
        public System.Byte?[] Integer_1Byte {
            get {
                return this._integer_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Integer_1Byte", "Integer_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._integer_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._integer_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Integer_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Integer_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Integer_2Byte", IsNullable=true)]
        public System.Int16?[] Integer_2Byte {
            get {
                return this._integer_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Integer_2Byte", "Integer_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._integer_2Byte = new System.Int16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._integer_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Integer_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Integer_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Integer_4Byte", IsNullable=true)]
        public System.Int32?[] Integer_4Byte {
            get {
                return this._integer_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Integer_4Byte", "Integer_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._integer_4Byte = new System.Int32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._integer_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Integer_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Integer_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Integer_8Byte", IsNullable=true)]
        public System.Int64?[] Integer_8Byte {
            get {
                return this._integer_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Integer_8Byte", "Integer_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._integer_8Byte = new System.Int64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._integer_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Dint_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Dint_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Dint_1Byte", IsNullable=true)]
        public System.Byte?[] Dint_1Byte {
            get {
                return this._dint_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Dint_1Byte", "Dint_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._dint_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dint_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Dint_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Dint_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Dint_2Byte", IsNullable=true)]
        public System.Int16?[] Dint_2Byte {
            get {
                return this._dint_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Dint_2Byte", "Dint_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._dint_2Byte = new System.Int16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dint_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Dint_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Dint_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Dint_4Byte", IsNullable=true)]
        public System.Int32?[] Dint_4Byte {
            get {
                return this._dint_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Dint_4Byte", "Dint_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._dint_4Byte = new System.Int32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dint_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Dint_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Dint_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Dint_8Byte", IsNullable=true)]
        public System.Int64?[] Dint_8Byte {
            get {
                return this._dint_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Dint_8Byte", "Dint_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._dint_8Byte = new System.Int64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dint_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Short_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Short_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Short_1Byte", IsNullable=true)]
        public System.Byte?[] Short_1Byte {
            get {
                return this._short_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Short_1Byte", "Short_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._short_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._short_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Short_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Short_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Short_2Byte", IsNullable=true)]
        public System.Int16?[] Short_2Byte {
            get {
                return this._short_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Short_2Byte", "Short_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._short_2Byte = new System.Int16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._short_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Short_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Short_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Short_4Byte", IsNullable=true)]
        public System.Int32?[] Short_4Byte {
            get {
                return this._short_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Short_4Byte", "Short_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._short_4Byte = new System.Int32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._short_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Short_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Short_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Short_8Byte", IsNullable=true)]
        public System.Int64?[] Short_8Byte {
            get {
                return this._short_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Short_8Byte", "Short_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._short_8Byte = new System.Int64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._short_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Long_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Long_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Long_1Byte", IsNullable=true)]
        public System.Byte?[] Long_1Byte {
            get {
                return this._long_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Long_1Byte", "Long_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._long_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._long_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Long_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Long_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Long_2Byte", IsNullable=true)]
        public System.Int16?[] Long_2Byte {
            get {
                return this._long_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Long_2Byte", "Long_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._long_2Byte = new System.Int16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._long_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Long_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Long_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Long_4Byte", IsNullable=true)]
        public System.Int32?[] Long_4Byte {
            get {
                return this._long_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Long_4Byte", "Long_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._long_4Byte = new System.Int32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._long_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Long_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Long_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Long_8Byte", IsNullable=true)]
        public System.Int64?[] Long_8Byte {
            get {
                return this._long_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Long_8Byte", "Long_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._long_8Byte = new System.Int64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._long_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Uint_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Uint_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Uint_1Byte", IsNullable=true)]
        public System.Byte?[] Uint_1Byte {
            get {
                return this._uint_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Uint_1Byte", "Uint_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uint_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uint_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Uint_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Uint_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Uint_2Byte", IsNullable=true)]
        public System.UInt16?[] Uint_2Byte {
            get {
                return this._uint_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Uint_2Byte", "Uint_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uint_2Byte = new System.UInt16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uint_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Uint_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Uint_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Uint_4Byte", IsNullable=true)]
        public System.UInt32?[] Uint_4Byte {
            get {
                return this._uint_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Uint_4Byte", "Uint_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uint_4Byte = new System.UInt32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uint_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Uint_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Uint_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Uint_8Byte", IsNullable=true)]
        public System.UInt64?[] Uint_8Byte {
            get {
                return this._uint_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Uint_8Byte", "Uint_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uint_8Byte = new System.UInt64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uint_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Ulong_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Ulong_1Byte.</value>
        [System.Xml.Serialization.XmlElement("Ulong_1Byte", IsNullable=true)]
        public System.Byte?[] Ulong_1Byte {
            get {
                return this._ulong_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Ulong_1Byte", "Ulong_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._ulong_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._ulong_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Ulong_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Ulong_2Byte.</value>
        [System.Xml.Serialization.XmlElement("Ulong_2Byte", IsNullable=true)]
        public System.UInt16?[] Ulong_2Byte {
            get {
                return this._ulong_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Ulong_2Byte", "Ulong_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._ulong_2Byte = new System.UInt16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._ulong_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Ulong_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Ulong_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Ulong_4Byte", IsNullable=true)]
        public System.UInt32?[] Ulong_4Byte {
            get {
                return this._ulong_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Ulong_4Byte", "Ulong_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._ulong_4Byte = new System.UInt32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._ulong_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Ulong_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Ulong_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Ulong_8Byte", IsNullable=true)]
        public System.UInt64?[] Ulong_8Byte {
            get {
                return this._ulong_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Ulong_8Byte", "Ulong_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._ulong_8Byte = new System.UInt64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._ulong_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the UShort_1Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The UShort_1Byte.</value>
        [System.Xml.Serialization.XmlElement("UShort_1Byte", IsNullable=true)]
        public System.Byte?[] UShort_1Byte {
            get {
                return this._uShort_1Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("UShort_1Byte", "UShort_1Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uShort_1Byte = new System.Byte?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uShort_1Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the UShort_2Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The UShort_2Byte.</value>
        [System.Xml.Serialization.XmlElement("UShort_2Byte", IsNullable=true)]
        public System.UInt16?[] UShort_2Byte {
            get {
                return this._uShort_2Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("UShort_2Byte", "UShort_2Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uShort_2Byte = new System.UInt16?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uShort_2Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the UShort_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The UShort_4Byte.</value>
        [System.Xml.Serialization.XmlElement("UShort_4Byte", IsNullable=true)]
        public System.UInt32?[] UShort_4Byte {
            get {
                return this._uShort_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("UShort_4Byte", "UShort_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uShort_4Byte = new System.UInt32?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uShort_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the UShort_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The UShort_8Byte.</value>
        [System.Xml.Serialization.XmlElement("UShort_8Byte", IsNullable=true)]
        public System.UInt64?[] UShort_8Byte {
            get {
                return this._uShort_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("UShort_8Byte", "UShort_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._uShort_8Byte = new System.UInt64?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._uShort_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Float_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Float_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Float_4Byte", IsNullable=true)]
        public System.Single?[] Float_4Byte {
            get {
                return this._float_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Float_4Byte", "Float_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._float_4Byte = new System.Single?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._float_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Float_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Float_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Float_8Byte", IsNullable=true)]
        public System.Double?[] Float_8Byte {
            get {
                return this._float_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Float_8Byte", "Float_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._float_8Byte = new System.Double?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._float_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Real_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Real_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Real_4Byte", IsNullable=true)]
        public System.Single?[] Real_4Byte {
            get {
                return this._real_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Real_4Byte", "Real_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._real_4Byte = new System.Single?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._real_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Real_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Real_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Real_8Byte", IsNullable=true)]
        public System.Double?[] Real_8Byte {
            get {
                return this._real_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Real_8Byte", "Real_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._real_8Byte = new System.Double?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._real_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Number_4Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Number_4Byte.</value>
        [System.Xml.Serialization.XmlElement("Number_4Byte", IsNullable=true)]
        public System.Single?[] Number_4Byte {
            get {
                return this._number_4Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Number_4Byte", "Number_4Byte cannot handle arrays bigger than 2 elements.");
                }
                this._number_4Byte = new System.Single?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._number_4Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Number_8Byte. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Number_8Byte.</value>
        [System.Xml.Serialization.XmlElement("Number_8Byte", IsNullable=true)]
        public System.Double?[] Number_8Byte {
            get {
                return this._number_8Byte;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Number_8Byte", "Number_8Byte cannot handle arrays bigger than 2 elements.");
                }
                this._number_8Byte = new System.Double?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._number_8Byte, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Time_stampField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Time_stampField.</value>
        [System.Xml.Serialization.XmlIgnore()]
        public System.DateTime?[] Time_stampField {
            get {
                return this._time_stampField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("Time_stampField", "Time_stampField cannot handle arrays bigger than 2 elements.");
                }
                this._time_stampField = new System.DateTime?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._time_stampField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the Time_stampField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The Time_stampField.</value>
        [System.Xml.Serialization.XmlElement("Time_stampField", IsNullable=true)]
        public string[] Time_stampFieldAsXmlString {
            get {
                string[] dtmaAsString = new System.String[2];
                if ((this.Time_stampField != null)) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if ((this.Time_stampField[index].HasValue == true)) {
                            dtmaAsString[index] = Time_stampField[index].Value.ToString("yyyy-MM-ddTHH:mm:ss");
                        }
                    }
                }
                return dtmaAsString;
            }
            set {
                if (value != null) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if (!System.String.IsNullOrEmpty(value[index]) && value[index].Length >= 19) {
this.Time_stampField[index] = System.DateTime.ParseExact(value[index].Substring(0, 19), "yyyy-MM-ddTHH:mm:ss", null);
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the DateTimeField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The DateTimeField.</value>
        [System.Xml.Serialization.XmlIgnore()]
        public System.DateTime?[] DateTimeField {
            get {
                return this._dateTimeField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("DateTimeField", "DateTimeField cannot handle arrays bigger than 2 elements.");
                }
                this._dateTimeField = new System.DateTime?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dateTimeField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the DateTimeField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The DateTimeField.</value>
        [System.Xml.Serialization.XmlElement("DateTimeField", IsNullable=true)]
        public string[] DateTimeFieldAsXmlString {
            get {
                string[] dtmaAsString = new System.String[2];
                if ((this.DateTimeField != null)) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if ((this.DateTimeField[index].HasValue == true)) {
                            dtmaAsString[index] = DateTimeField[index].Value.ToString("yyyy-MM-ddTHH:mm:ss");
                        }
                    }
                }
                return dtmaAsString;
            }
            set {
                if (value != null) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if (!System.String.IsNullOrEmpty(value[index]) && value[index].Length >= 19) {
this.DateTimeField[index] = System.DateTime.ParseExact(value[index].Substring(0, 19), "yyyy-MM-ddTHH:mm:ss", null);
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the DateField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The DateField.</value>
        [System.Xml.Serialization.XmlIgnore()]
        public System.DateTime?[] DateField {
            get {
                return this._dateField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("DateField", "DateField cannot handle arrays bigger than 2 elements.");
                }
                this._dateField = new System.DateTime?[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._dateField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the DateField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The DateField.</value>
        [System.Xml.Serialization.XmlElement("DateField", IsNullable=true)]
        public string[] DateFieldAsXmlString {
            get {
                string[] dtmaAsString = new System.String[2];
                if ((this.DateField != null)) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if ((this.DateField[index].HasValue == true)) {
                            dtmaAsString[index] = DateField[index].Value.ToString("yyyy-MM-ddTHH:mm:ss");
                        }
                    }
                }
                return dtmaAsString;
            }
            set {
                if (value != null) {
                    for (int index = 0; (index < 2); index++
                    ) {
                        if (!System.String.IsNullOrEmpty(value[index]) && value[index].Length >= 19) {
this.DateField[index] = System.DateTime.ParseExact(value[index].Substring(0, 19), "yyyy-MM-ddTHH:mm:ss", null);
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the StringField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The StringField.</value>
        [System.Xml.Serialization.XmlElement("StringField", IsNullable=true)]
        public string[] StringField {
            get {
                return this._stringField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("StringField", "StringField cannot handle arrays bigger than 2 elements.");
                }
                this._stringField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._stringField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the PrismoStringField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The PrismoStringField.</value>
        [System.Xml.Serialization.XmlElement("PrismoStringField", IsNullable=true)]
        public string[] PrismoStringField {
            get {
                return this._prismoStringField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("PrismoStringField", "PrismoStringField cannot handle arrays bigger than 2 elements.");
                }
                this._prismoStringField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._prismoStringField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the PcsstringField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The PcsstringField.</value>
        [System.Xml.Serialization.XmlElement("PcsstringField", IsNullable=true)]
        public string[] PcsstringField {
            get {
                return this._pcsstringField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("PcsstringField", "PcsstringField cannot handle arrays bigger than 2 elements.");
                }
                this._pcsstringField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._pcsstringField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the OpcstringField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The OpcstringField.</value>
        [System.Xml.Serialization.XmlElement("OpcstringField", IsNullable=true)]
        public string[] OpcstringField {
            get {
                return this._opcstringField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("OpcstringField", "OpcstringField cannot handle arrays bigger than 2 elements.");
                }
                this._opcstringField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._opcstringField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the WordField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The WordField.</value>
        [System.Xml.Serialization.XmlElement("WordField", IsNullable=true)]
        public string[] WordField {
            get {
                return this._wordField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("WordField", "WordField cannot handle arrays bigger than 2 elements.");
                }
                this._wordField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._wordField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the S7charField. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The S7charField.</value>
        [System.Xml.Serialization.XmlElement("S7charField", IsNullable=true)]
        public string[] S7charField {
            get {
                return this._s7charField;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("S7charField", "S7charField cannot handle arrays bigger than 2 elements.");
                }
                this._s7charField = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._s7charField, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the MyChar. Unit: # with dimensions [2].
        /// </summary>
        /// <value>The MyChar.</value>
        [System.Xml.Serialization.XmlElement("MyChar", IsNullable=true)]
        public string[] MyChar {
            get {
                return this._myChar;
            }
            set {
                if (((value != null) 
                            && (value.Length > 2))) {
                    throw new System.ArgumentOutOfRangeException("MyChar", "MyChar cannot handle arrays bigger than 2 elements.");
                }
                this._myChar = new string[2];
                if ((value != null)) {
                    System.Array.Copy(value, 0, this._myChar, 0, System.Math.Min(2, value.Length));
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the array of key column values.
        /// </summary>
        /// <value>The arrays of key column values.</value>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public object[] Keys {
            get {
                object[] keys = new object[20];
                return keys;
            }
            set {
                if (((value == null) 
                            || (value.Length < 0))) {
                    throw new System.ArgumentException();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the telegram Name.
        /// </summary>
        /// <value>The Name.</value>
        [System.Xml.Serialization.XmlAttributeAttribute("Name")]
        public string Name {
            get {
                return Telegram_B._name;
            }
            set {
                if (value != null && !value.Equals("Telegram_B")) {
throw new System.ArgumentException();
                }
                Telegram_B._name = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the telegram ID.
        /// </summary>
        /// <value>The ID.</value>
        [System.Xml.Serialization.XmlAttributeAttribute("ID")]
        public string ID {
            get {
                return Telegram_B._iD;
            }
            set {
                if ((value != "44")) {
throw new System.ArgumentException();
                }
                Telegram_B._iD = value;
            }
        }
        
        /// <summary>
        /// Gets the default id of this telegram.
        /// </summary>
        /// <value>The XML table name.</value>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public static string Id {
            get {
                return "44";
            }
        }
        
        /// <summary>
        /// Gets the fullname of telegram including namespace.
        /// </summary>
        /// <value>The fullname of telegram including namespace.</value>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string Fullname {
            get {
                return TelegramFullname;
            }
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Telegram_B"/> class.
        /// Deserializes specified XML.
        /// </summary>
        /// <param name="xml">The XML.</param>
        /// <returns>Deserialized instance of the <see cref="Telegram_B"/> class.</returns>
        public static Telegram_B Create(string xml) {
            System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(typeof(Telegram_B));
            return (Telegram_B)xs.Deserialize(new System.IO.StringReader(xml));
        }
        
        /// <summary>
        /// Serializes this instance of the <see cref="Telegram_B"/> class and returns this xml as string.
        /// </summary>
        /// <returns>Serialized instance of this <see cref="Telegram_B"/> class.</returns>
        public string GetXml() {
            System.IO.StringWriter wr = new System.IO.StringWriter();
            new System.Xml.Serialization.XmlSerializer(typeof(Telegram_B)).Serialize(wr, this);
            return wr.ToString();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Telegram_B"/> class.
        /// Deserializes specified bytes array.
        /// </summary>
        /// <param name="bytes">The bytes array.</param>
        /// <returns>Deserialized instance of the <see cref="Telegram_B"/> class.</returns>
        public static Telegram_B Create(byte[] bytes) {
            if (string.IsNullOrEmpty(_telegramXsbtDefinition)) throw new System.NotSupportedException();
            System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
            doc.LoadXml(_headerXsbtDefinition);
            var typeMapping = new ProconTel.Mapping.TypeMapping(doc);
            var telegramHeader = ProconTel.Mapping.XsbtHeaderReader.ReadXml(_headerXsbtDefinition, typeMapping);
            var xsbtRegistry = new ProconTel.Mapping.BinaryXmlTranslator.XsbtRegistry(telegramHeader);
            xsbtRegistry.AddSchema(_telegramXsbtDefinition);
            var settings = ProconTel.Mapping.BinaryXmlTranslator.BinarySettings.Default;
            var translator = new ProconTel.Mapping.BinaryXmlTranslator.Translator(xsbtRegistry, typeMapping, new ProconTel.Mapping.BinaryXmlTranslator.BinaryBufferConverter { SwapBytes = settings.SwapBytes, InfinityValuesAccepted = settings.InfinityValuesAccepted }) { Settings = settings };
            Telegram_B telegram = new Telegram_B();
            translator.ConvertBufferToTelegramObject(translator.FindTelegramIdInBinaryData(bytes), telegram, bytes);
            return (Telegram_B)telegram;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Telegram_B"/> class.
        /// Deserializes specified object.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns>Deserialized instance of the <see cref="Telegram_B"/> class.</returns>
        public static Telegram_B Create(object obj) {
            if(obj is string) return Create(obj.ToString());
            if(obj is byte[]) return Create((byte[])obj);
            return Create(obj.ToString());
        }
        
        /// <summary>
        /// Serializes this instance of the <see cref="Telegram_B"/> class and returns bytes array.
        /// </summary>
        /// <returns>Serialized instance of this <see cref="Telegram_B"/> class.</returns>
        public byte[] GetBytes() {
            if(string.IsNullOrEmpty(_telegramXsbtDefinition)) throw new System.NotSupportedException();
            System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
            doc.LoadXml(_headerXsbtDefinition);
            var typeMapping = new ProconTel.Mapping.TypeMapping(doc);
            var telegramHeader = ProconTel.Mapping.XsbtHeaderReader.ReadXml(_headerXsbtDefinition, typeMapping);
            var xsbtRegistry = new ProconTel.Mapping.BinaryXmlTranslator.XsbtRegistry(telegramHeader);
            var settings = ProconTel.Mapping.BinaryXmlTranslator.BinarySettings.Default;
            xsbtRegistry.AddSchema(_telegramXsbtDefinition);
            var translator = new ProconTel.Mapping.BinaryXmlTranslator.Translator(xsbtRegistry, typeMapping, new ProconTel.Mapping.BinaryXmlTranslator.BinaryBufferConverter { SwapBytes = settings.SwapBytes, InfinityValuesAccepted = settings.InfinityValuesAccepted }) { Settings = settings };
            return translator.ConvertTelegramObjectToBuffer(this);
        }
    }
}
