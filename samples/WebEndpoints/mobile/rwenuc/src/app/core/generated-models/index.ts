/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class AuthenticateRequest implements IAuthenticateRequest {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuthenticateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthenticateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAuthenticateRequest {
    email?: string | undefined;
    password?: string | undefined;
}

export class AuthenticateResponse implements IAuthenticateResponse {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    token?: string | undefined;

    constructor(data?: IAuthenticateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): AuthenticateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["email"] = this.email;
        data["token"] = this.token;
        return data; 
    }
}

export interface IAuthenticateResponse {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    token?: string | undefined;
}

export class CancelOrderCommand implements ICancelOrderCommand {
    orderId?: number;
    email?: string | undefined;

    constructor(data?: ICancelOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CancelOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CancelOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["email"] = this.email;
        return data; 
    }
}

export interface ICancelOrderCommand {
    orderId?: number;
    email?: string | undefined;
}

export class OrderDto implements IOrderDto {
    id?: number;
    containerId?: string | undefined;
    containerType?: string | undefined;
    startPositionName?: string | undefined;
    startPositionId?: string | undefined;
    startId?: number;
    endPositionName?: string | undefined;
    endPositionId?: string | undefined;
    endId?: number;
    priority?: number;
    createdDate?: Date;
    startedData?: Date | undefined;
    finishedDate?: Date | undefined;
    wipeTestNeeded?: boolean;
    operatedBy?: string | undefined;
    status?: OrderStatus;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.containerId = _data["containerId"];
            this.containerType = _data["containerType"];
            this.startPositionName = _data["startPositionName"];
            this.startPositionId = _data["startPositionId"];
            this.startId = _data["startId"];
            this.endPositionName = _data["endPositionName"];
            this.endPositionId = _data["endPositionId"];
            this.endId = _data["endId"];
            this.priority = _data["priority"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.startedData = _data["startedData"] ? new Date(_data["startedData"].toString()) : <any>undefined;
            this.finishedDate = _data["finishedDate"] ? new Date(_data["finishedDate"].toString()) : <any>undefined;
            this.wipeTestNeeded = _data["wipeTestNeeded"];
            this.operatedBy = _data["operatedBy"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["containerId"] = this.containerId;
        data["containerType"] = this.containerType;
        data["startPositionName"] = this.startPositionName;
        data["startPositionId"] = this.startPositionId;
        data["startId"] = this.startId;
        data["endPositionName"] = this.endPositionName;
        data["endPositionId"] = this.endPositionId;
        data["endId"] = this.endId;
        data["priority"] = this.priority;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["startedData"] = this.startedData ? this.startedData.toISOString() : <any>undefined;
        data["finishedDate"] = this.finishedDate ? this.finishedDate.toISOString() : <any>undefined;
        data["wipeTestNeeded"] = this.wipeTestNeeded;
        data["operatedBy"] = this.operatedBy;
        data["status"] = this.status;
        return data; 
    }
}

export interface IOrderDto {
    id?: number;
    containerId?: string | undefined;
    containerType?: string | undefined;
    startPositionName?: string | undefined;
    startPositionId?: string | undefined;
    startId?: number;
    endPositionName?: string | undefined;
    endPositionId?: string | undefined;
    endId?: number;
    priority?: number;
    createdDate?: Date;
    startedData?: Date | undefined;
    finishedDate?: Date | undefined;
    wipeTestNeeded?: boolean;
    operatedBy?: string | undefined;
    status?: OrderStatus;
}

export enum OrderStatus {
    Postponed = "Postponed",
    WipeTestRequested = "WipeTestRequested",
    ReadyToTransport = "ReadyToTransport",
    Registered = "Registered",
    InProgress = "InProgress",
    Finished = "Finished",
    Removed = "Removed",
}

export class RefreshTokenRequest implements IRefreshTokenRequest {
    token?: string | undefined;
    refreshToken?: string | undefined;

    constructor(data?: IRefreshTokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["refreshToken"] = this.refreshToken;
        return data; 
    }
}

export interface IRefreshTokenRequest {
    token?: string | undefined;
    refreshToken?: string | undefined;
}

export class RegisterOrderCommand implements IRegisterOrderCommand {
    orderId?: number;
    email?: string | undefined;
    register?: boolean;

    constructor(data?: IRegisterOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.email = _data["email"];
            this.register = _data["register"];
        }
    }

    static fromJS(data: any): RegisterOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["email"] = this.email;
        data["register"] = this.register;
        return data; 
    }
}

export interface IRegisterOrderCommand {
    orderId?: number;
    email?: string | undefined;
    register?: boolean;
}

export class StartOrderCommand implements IStartOrderCommand {
    orderId?: number;
    email?: string | undefined;

    constructor(data?: IStartOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): StartOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new StartOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["email"] = this.email;
        return data; 
    }
}

export interface IStartOrderCommand {
    orderId?: number;
    email?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data; 
    }
}

export interface IUserDto {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
}